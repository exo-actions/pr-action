name: PR BUILD
description: 'This action is used to build maven projects with partial builds support'
author: 'eXo Platform'
inputs:
  maven_version:
    description: Maven version
    default: "3.9.9"
    required: false
  maven_profiles:
    description: Maven Profiles
    required: false
  extra_maven_opts:
    description: Extra Maven OPTS
    required: false
  jdk_major_version:
    description: JDK Major version (eg 8, 11, 14, 17, 21,...)
    default: "17"
    required: false
  jdk_distribution:
    description: OpenJDK Adopted Distribution (temurin, zulu, adopt, liberica,...)
    default: "zulu"
    required: false
  maximize_build_space:
    description: Maximize Build Space for Bigger Projects Unit tests based on files and blocks
    required: false
    default: "false"
  NEXUS_USERNAME:
    description: Maven Nexus server user name (readonly user is highly recommended)
    required: false
  NEXUS_PASSWORD:
    description: Maven Nexus server user password
    required: false
  GH_TOKEN:
    description: Github user token for private repositories (defaults to github.token)
    required: false
  M2_SETTINGS_FILE_URL:
    description: Maven Settings.xml file download URL
    required: false
  GIT_CHECKOUT_SHOW_PROGRESS:
    description: Show git checkout progress
    default: "false"
    required: false

runs:
  using: "composite"
  steps:
    # Hack: Maximize Disk space for big & legacy projects (May become unsupported in future Azure runner releases)
    - name: Maximize build space
      uses: easimon/maximize-build-space@v10
      if: ${{ inputs.maximize_build_space == true }}
      with:
        root-reserve-mb: 2048
        temp-reserve-mb: 2048
        swap-size-mb: 1024
        remove-dotnet: "true"
    # Checkout Repository (Shallow clone is disabled due to partial builds Checks)
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ inputs.GH_TOKEN || github.token }}
        show-progress: ${{ inputs.GIT_CHECKOUT_SHOW_PROGRESS }}
    # Check Partial Build Eligibility
    - name: Analyse Pull Request Changes
      shell: bash
      id: analyse-pr
      env:
        GH_TOKEN: ${{ inputs.GH_TOKEN || github.token }}
        is_fork: ${{ github.event.pull_request.head.repo.fork }}
        base_branch_name: ${{ github.event.pull_request.base.ref }}
        clone_url: ${{ github.event.pull_request.head.repo.clone_url }}
        pull_number: ${{ github.event.pull_request.number }}
      run: |
        echo "partialmodules=" >> $GITHUB_OUTPUT
        if [ "${is_fork}" = "true" ]; then 
          echo "❌ Partial Build for forked repositories is not yet supported! Performing full build ..."
          exit 0
        fi
        if [[ "${base_branch_name}" =~ ^patch/ ]]; then 
          echo "❌ Patch PR is detected Performing full build ..."
          exit 0
        fi
        baseBranchSha=$(git rev-parse origin/${base_branch_name})
        mergebaseSha=$(git merge-base origin/${base_branch_name} HEAD)
        if [ ! "${baseBranchSha}" = "${mergebaseSha}" ]; then 
          echo "❌ Branch is diverged! Please update the branch! Performing full build ..."
          exit 0
        fi
        if [ ! -z "$(gh pr view ${pull_number} --json labels --repo ${clone_url} | jq -r '.labels[].name' 2>/dev/null | grep fullCIBuild)" ]; then 
          echo "✅ Partial Build is disabled by fullCIBuild label! Performing full build ..."
          exit 0
        fi
        echo "Looking for frontend modules..."
        frontendModules=$(find -name pom.xml | while read pomfile; do 
          if grep -qi '<packaging>war</packaging>' $pomfile; then 
            dirname $pomfile | sed -E 's|^\.\/||g'
          fi
        done | xargs)
        if [ -z "${frontendModules}" ]; then 
          echo "✅ No Frontend modules detected! Performing full build ..."
          exit 0
        fi
        echo -e "✅ Frontend Modules are ${frontendModules}"
        echo "Changed files are:"
        git diff --name-only origin/${base_branch_name} HEAD
        files=$(git diff --name-only origin/${base_branch_name} HEAD | (grep -Pv '^\.github' ||:) | xargs)
        echo
        echo "Checking if all changed files belong to frontend submodules for partial build eligibility..."
        modulestoBuild=""
        for file in $files; do
          notfound=true
          for module in $frontendModules; do 
            if echo "$file" | grep -qP "^${module}"; then
              modulestoBuild="$(echo ${modulestoBuild} ${module} | xargs)"
              notfound=false
              break
            fi
          done
          if $notfound; then 
            echo "❌ Changed file $file does not belong to frontend modules. Performing full build..."
            exit 0
          fi   
        done
        if [ -z "${modulestoBuild}" ]; then 
          echo "✅ No Frontend modules to build detected! Performing full build ..."
          exit 0
        fi
        # Remove duplicates
        modulestoBuild=$(printf '%s\n' $modulestoBuild | sort -u | xargs | sed 's/ /,/g')
        echo -e "Frontend Modules to build are ${modulestoBuild}"
        echo "partialmodules=${modulestoBuild}" >> $GITHUB_OUTPUT
    # Setup JDK
    - name: Set up JDK ${{ inputs.jdk_major_version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ inputs.jdk_major_version }}
        distribution: ${{ inputs.jdk_distribution }}
    # Setup Maven
    - name: Set up Maven ${{ inputs.maven_version }}
      uses: stCarolas/setup-maven@v5
      with:
        maven-version: ${{ inputs.maven_version }}
    # Cache Maven Artifcats to boost up builds
    - name: Cache Maven artifacts
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2-repository
    # Prepare Maven Enviroment by supplying basic settings.xml with readonly/headless access
    - name: Prepare environment
      shell: bash
      if: inputs.M2_SETTINGS_FILE_URL != ''
      run: |
        mkdir -p ~/.m2
        wget -q "${{ inputs.M2_SETTINGS_FILE_URL }}" -O ~/.m2/settings.xml
    # Add/Remove partialCIBuild Github Label according to partial build eligibility
    - name: Submit Partial PR label
      shell: bash
      env:
        MAVEN_SUBMODULES: ${{ steps.analyse-pr.outputs.partialmodules }}
        GH_TOKEN: ${{ inputs.GH_TOKEN || github.token }}
        clone_url: ${{ github.event.pull_request.head.repo.clone_url }}
        pull_number: ${{ github.event.pull_request.number }}
      run: |
        if [ ! -z "${MAVEN_SUBMODULES:-}" ]; then
          gh pr edit ${pull_number} --add-label partialCIBuild --repo ${clone_url} || true 
        else 
          gh pr edit ${pull_number} --remove-label partialCIBuild --repo ${clone_url} || true
        fi
    # Perform Maven Build
    - name: Build module
      shell: bash
      env:
        MAVEN_OPTS: ${{ inputs.extra_maven_opts }}
        NEXUS_USERNAME: ${{ inputs.NEXUS_USERNAME }}
        NEXUS_PASSWORD: ${{ inputs.NEXUS_PASSWORD }}
        MAVEN_SUBMODULES: ${{ steps.analyse-pr.outputs.partialmodules }}
      run: |
        MAVEN_SUBMODULES_ARGS=""
        if [ ! -z "${MAVEN_SUBMODULES:-}" ]; then
          MAVEN_SUBMODULES_ARGS="-pl $(echo ${MAVEN_SUBMODULES} | sed 's/,/ -pl /g')"
        fi
        mvn -B clean verify -P${{ inputs.maven_profiles }} -Dstyle.color=always -Dmaven.artifact.threads=20 -U ${MAVEN_SUBMODULES_ARGS}
branding:
  icon: "anchor"
  color: "gray-dark"